<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"
	default-autowire="byName">

	<!-- 使用注解配置：将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、
		CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 
		以及equiredAnnotationBeanPostProcessor 4 个 BeanPostProcessor -->
	<context:annotation-config />
	
	<!-- 使用注解自动注册bean，将特定的注解的对象作为Bean注册进Spring容器 -->
	<context:component-scan base-package="com.knight.emms" annotation-config="true">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan> 
	
	<!-- 支持异步省缺配置 -->
	<task:annotation-driven proxy-target-class="true"/>
	
	<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
    <!-- <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/> -->
	
	<!-- 扫描使用了 JSR-250 注释的 Bean，并对它们进行相应的操作 -->
	<!-- <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/> -->
	
	<!-- 配置信息 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:resource/systemConfig.properties</value>
				<value>classpath:hibernate.properties</value>
				<value>classpath:resource/application_resource.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源定义 -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean" scope="singleton" lazy-init="default" autowire="default">
		<property name="jndiName">
			<value>${jdbc-res-ref-name}</value>
		</property>
	</bean>
	<bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" />
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--xml配置形式-->
		<property name="mappingLocations">
			<list>
				<value>classpath:com/knight/system/model/*.hbm.xml</value>
				<value>classpath:com/knight/emms/model/*.hbm.xml</value>
				<value>classpath:com/knight/app/model/*.hbm.xml</value>
			</list>
		</property>
		<!--注解配置形式-->
		<property name="packagesToScan">
			<list>
				<value>com.knight.emms.model</value>
				<value>com.knight.app.model</value>
				<value>com.knight.system.model</value>
			</list>
		</property>
		<!-- 为处理Blob类型字段的句柄声明 // -->
		<property name="lobHandler">
			<ref local="defaultLobHandler" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="connection.useUnicode">${connection.useUnicode}</prop>
				<prop key="connection.characterEncoding">${connection.characterEncoding}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
			</props>
		</property>
	</bean>

	<!-- JDBC模版 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Hibernate模版 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate" scope="singleton" lazy-init="default">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 事务控制配置 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="interceptorPointCuts0" expression="execution(* com.knight.*.service.impl.*.*(..))" />
		<aop:pointcut id="interceptorPointCuts1" expression="execution(* com.knight.*.domain.impl.*.*(..))" />
		<aop:pointcut id="interceptorPointCuts2" expression="execution(* com.knight.emms.core.service.*.*(..))" />
		<aop:pointcut id="interceptorPointCuts3" expression="execution(* com.knight.app.core.service.*.*(..))" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="interceptorPointCuts0" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="interceptorPointCuts1" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="interceptorPointCuts2" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="interceptorPointCuts3" />
	</aop:config>
	
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="cacheSeconds" value="0" />
		<property name="basenames">
			<list>
				<value>classpath:message_zh_CN.properties</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>
	
	<bean id="applicationContextHelper" class="com.knight.core.ApplicationContextHelper" />
	<bean id="logAspect" class="com.knight.system.logger.LogAspect" />
</beans>