/**
 *====================================================
 * 文件名称: PractitionerAction.java
 * 修订记录：
 * No    日期				作者(操作:具体内容)
 * 1.    2013-7-4			chenxy(创建:创建文件)
 *====================================================
 * 类描述：(说明未实现或其它不应生成javadoc的内容)
 */
package com.knight.emms.web.action;

import java.util.List;

import javax.annotation.Resource;

import lombok.Getter;
import lombok.Setter;

import com.knight.core.exception.BusinessException;
import com.knight.core.filter.QueryFilter;
import com.knight.core.log.ActionLog;
import com.knight.core.model.ExportField;
import com.knight.core.model.ExportModel;
import com.knight.core.util.GsonUtil;
import com.knight.core.web.action.ExportBaseAction;
import com.knight.emms.constant.Constant;
import com.knight.emms.constant.Status;
import com.knight.emms.model.CorpInfo;
import com.knight.emms.model.Practitioner;
import com.knight.emms.service.PractitionerService;
import com.knight.system.constant.SystemConstant;
import com.knight.system.model.AppUser;
import com.knight.system.model.AppUserExtend;
import com.knight.system.model.Department;
import com.knight.system.service.AppUserExtendService;

/**
 * @ClassName: PractitionerAction
 * @Description: TODO(这里用一句话描述这个类的作用)
 * @author chenxy
 * @date 2013-7-4 上午11:07:21
 */
public class PractitionerAction extends ExportBaseAction<Practitioner> {

	private static final long serialVersionUID = 1L;

	@Getter
	@Setter
	private Practitioner practitioner;

	@Getter
	@Setter
	private Long practiId;

	@Resource
	private PractitionerService practitionerService;

	@Resource
	private AppUserExtendService appUserExtendService;

	protected String getUnBaseTypeValue(ExportModel model, Object value, ExportField exportField, int headerIndex) throws Exception {
		if (value instanceof Department) {
			return ((Department) value).getDepName();
		} else if (value instanceof CorpInfo) {
			return ((CorpInfo) value).getCorpName();
		} else if (value instanceof AppUser) {
			return ((AppUser) value).getUsername();
		}
		return null;
	}

	public String list() {
		QueryFilter filter = new QueryFilter(getRequest());
		List<Practitioner> list = practitionerService.queryTranslateAll(filter);
		StringBuffer buff = new StringBuffer("{success:true,'totalCounts':").append(filter.getPagingBean().getTotalItems()).append(",result:");
		buff.append(GsonUtil.toJson(list, GsonUtil.SINCE_VERSION_20, false));
		buff.append("}");
		this.jsonString = buff.toString();
		return SUCCESS;
	}

	public String load() {
		Practitioner p = practitionerService.getTranslate(practiId);
		StringBuffer sb = new StringBuffer("{success:true,data:[");
		if (p.getAppUser() == null) {
			p.setAppUser(new AppUser());
		}
		sb.append(GsonUtil.toJson(p, GsonUtil.SINCE_VERSION_20, false));
		sb.append("]}");
		setJsonString(sb.toString());
		return SUCCESS;
	}

	@ActionLog(description = "新增或更新从业人员档案信息")
	public String save() {
		AppUserExtend appUserExtend = new AppUserExtend();
		appUserExtend.setForeignModule(SystemConstant.MODULE_PRACTITIONER);
		if (practitioner.getAppUser() != null && practitioner.getAppUser().getUserId() != null) {
			appUserExtend.setUserId(practitioner.getAppUser().getUserId());
			appUserExtend.setForeignId(practitioner.getPractiId());
			appUserExtend.setForeignName(practitioner.getPractiName());
			if (appUserExtendService.isExistByModule(appUserExtend)) {
				throw new BusinessException("系统帐户已经被他人关联,请重新选择或者重新创建!");
			}
		} else {
			practitioner.setAppUser(null);
		}
		if (practitioner.getPractiId() == null) {
			practitioner.setPractiStatus(Status.Archives.enabled);
			practitioner.setDelFlag(Constant.ENABLED);
			practitionerService.save(practitioner);
			setFileAttach(practitioner.getPractiId());
		} else {
			Practitioner p = practitionerService.get(practitioner.getPractiId());
			practitioner.setCorpInfo(p.getCorpInfo());
			practitioner.setPractiStatus(p.getPractiStatus());
			practitioner.setDelFlag(p.getDelFlag());
			practitionerService.merge(practitioner);
		}
		appUserExtend.setForeignId(practitioner.getPractiId());
		if (appUserExtend.getUserId() == null) {
			appUserExtendService.removeByModule(appUserExtend);
		} else {
			appUserExtendService.saveByModule(appUserExtend);
		}
		return SUCCESS;
	}

	@ActionLog(description = "删除从业人员档案信息")
	public String multiDel() {
		String[] ids = getRequest().getParameterValues("ids");
		for (String id : ids) {
			Practitioner p = practitionerService.get(new Long(id));
			p.setDelFlag(Constant.DISENABLED);
			practitionerService.save(p);
		}
		return SUCCESS;
	}

	@ActionLog(description = "注销从业人员")
	public String multiCancel() {
		String[] ids = getRequest().getParameterValues("ids");
		for (String id : ids) {
			Practitioner p = practitionerService.get(new Long(id));
			p.setPractiStatus(Status.Archives.cancel);
			practitionerService.save(p);
		}
		return SUCCESS;
	}

	@ActionLog(description = "恢复从业人员")
	public String recover() {
		String[] ids = getRequest().getParameterValues("ids");
		for (String id : ids) {
			Practitioner p = practitionerService.get(new Long(id));
			p.setPractiStatus(Status.Archives.enabled);
			practitionerService.save(p);
		}
		return SUCCESS;
	}

}
