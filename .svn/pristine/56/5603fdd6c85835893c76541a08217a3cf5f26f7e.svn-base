/**
 *====================================================
 * 文件名称: SettleContractServiceImpl.java
 * 修订记录：
 * No    日期				作者(操作:具体内容)
 * 1.    2013-9-24			chenxy(创建:创建文件)
 *====================================================
 * 类描述：(说明未实现或其它不应生成javadoc的内容)
 */
package com.knight.emms.service.impl;

import java.math.BigDecimal;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;

import com.knight.core.exception.BusinessException;
import com.knight.core.filter.QueryFilter;
import com.knight.core.service.ExportService;
import com.knight.emms.constant.Constant;
import com.knight.emms.constant.Status;
import com.knight.emms.constant.Type;
import com.knight.emms.core.service.BaseBusinessModelServiceImpl;
import com.knight.emms.dao.AmountReceiveDao;
import com.knight.emms.dao.ContractLeaseDao;
import com.knight.emms.dao.EquipDiaryDao;
import com.knight.emms.dao.OperatorSalaryStatementDao;
import com.knight.emms.dao.OtherExpenseStatementDao;
import com.knight.emms.dao.SafetyMonitorSettleStatementDao;
import com.knight.emms.dao.SettleComponBriefDao;
import com.knight.emms.dao.SettleContractDao;
import com.knight.emms.dao.SettleEquipBriefDao;
import com.knight.emms.dao.SettleItemBriefDao;
import com.knight.emms.domain.FundPaymentVoucherService;
import com.knight.emms.domain.FundReceiveVoucherService;
import com.knight.emms.model.AmountPayment;
import com.knight.emms.model.AmountReceive;
import com.knight.emms.model.ContractCostitem;
import com.knight.emms.model.ContractLease;
import com.knight.emms.model.EquipDiary;
import com.knight.emms.model.SettleContract;
import com.knight.emms.model.SettleEquipBrief;
import com.knight.emms.service.InstalmentService;
import com.knight.emms.service.ReceivementService;
import com.knight.emms.service.SettleContractService;
import com.knight.emms.support.FundPlanSupport;
import com.knight.system.constant.SystemConstant;
import com.knight.system.service.impl.CodeServiceImpl;

/**
 * @ClassName: SettleContractServiceImpl
 * @Description: TODO(这里用一句话描述这个类的作用)
 * @author chenxy
 * @date 2013-9-24 下午5:10:23
 */
public class SettleContractServiceImpl extends BaseBusinessModelServiceImpl<SettleContract> implements SettleContractService, FundReceiveVoucherService, FundPaymentVoucherService, ExportService {

	private SettleContractDao settleContractDao;

	@Resource
	private SettleEquipBriefDao settleEquipBriefDao;

	@Resource
	private SettleComponBriefDao settleComponBriefDao;

	@Resource
	private SettleItemBriefDao settleItemBriefDao;

	@Resource
	private EquipDiaryDao equipDiaryDao;

	@Resource
	private ContractLeaseDao contractLeaseDao;

	@Resource
	private InstalmentService instalmentService;

	@Resource
	private ReceivementService receivementService;
	
	@Resource
	private AmountReceiveDao amountReceiveDao;
	
	@Resource
	private OperatorSalaryStatementDao operatorSalaryStatementDao;
	
	@Resource
	private SafetyMonitorSettleStatementDao safetyMonitorSettleStatementDao;
	
	@Resource
	private OtherExpenseStatementDao otherExpenseStatementDao;
	
	public SettleContractServiceImpl(SettleContractDao dao) {
		super(dao);
		this.settleContractDao = dao;
	}

	public SettleContract getTranslateAll(Long settleId) {
		SettleContract settle = settleContractDao.get(settleId);
		CodeServiceImpl.translate(settle, settleContractDao.getPersistantStruct());
		settle.getSettleComponBriefSet();
		settle.getSettleEquipBriefSet();
		CodeServiceImpl.translate(settle.getInstalmentSet(), instalmentService.getPersistantStruct());
		CodeServiceImpl.translate(settle.getReceivementSet(), receivementService.getPersistantStruct());
		return settle;
	}

	public void saveOrMergeEdit(SettleContract settleContract) {
		if (settleContract.getSettleId() == null) {
			settleContractDao.saveSerialModel(settleContract);
		}
		settleContract.setSubSettleContract();
//		if (settleContract.getTaxRate() != null && settleContract.getSettleAmount() != null) {
//			if(settleContract.getTaxRate().contains("%")) {
//				BigDecimal bd = new BigDecimal(settleContract.getTaxRate().replace("%", ""));
//				bd = bd.divide(new BigDecimal(100));
//				settleContract.setTaxAmount(settleContract.getSettleAmount().multiply(bd));
//			}
//		}
		settleContractDao.merge(settleContract);
		if (Type.Fund.receive.equals(settleContract.getFundType())) { // 收款
			settleContract.setReceivementSet(FundPlanSupport.createReceivement(settleContract));
			receivementService.saveOrMeger(settleContract.getReceivementSet());
		} else if (Type.Fund.payment.equals(settleContract.getFundType())) { // 付款
			settleContract.setInstalmentSet(FundPlanSupport.createInstalment(settleContract));
			instalmentService.saveOrMeger(settleContract.getInstalmentSet());
		}
	}

	public void deleteEquipBrief(Long seBriefId) {
		settleEquipBriefDao.remove(seBriefId);
	}

	public void deleteComponBrief(Long scBriefId) {
		settleComponBriefDao.remove(scBriefId);
	}

	public void deleteItemBrief(Long siBriefId) {
		settleItemBriefDao.remove(siBriefId);
	}

	public void effective(SettleContract settleContract) {
		for (SettleEquipBrief settleEquip : settleContract.getSettleEquipBriefSet()) {
			if (settleEquip.getEquipDiaryId() == null) {
				continue;
			}
			EquipDiary ed = equipDiaryDao.get(settleEquip.getEquipDiaryId());
			if (ed == null) {
				continue;
			}
			ed.setLastSettleDate(settleEquip.getEndSettleDate());
			equipDiaryDao.save(ed);
		}

		// 合同金额累加
		ContractLease cl = contractLeaseDao.get(settleContract.getContractId());
		cl.setContractAmount(cl.getContractAmount().add(settleContract.getSettleAmount()));
		cl.setDebitReceivable(cl.getDebitReceivable().add(settleContract.getSettleAmount()));
		contractLeaseDao.save(cl);

		settleContract.setEffective(Constant.ENABLED);
		settleContractDao.save(settleContract);
	}

	public void loseEffective(SettleContract settleContract) {
		QueryFilter filter = new QueryFilter();
		filter.addConjunctFilter("Q_delFlag_S_EQ", Constant.ENABLED);
		filter.addConjunctFilter("Q_relateId_L_EQ", settleContract.getSettleId()+"");
		filter.addConjunctFilter("Q_relateModule_S_EQ", SystemConstant.MODULE_SETTLE_CONTRACT);
		List<AmountReceive> list = amountReceiveDao.getAll(filter);
		if(list.size()>0) {
			throw new BusinessException("存在下游单据，无法失效！");
		}
		// 合同金额累加
		ContractLease cl = contractLeaseDao.get(settleContract.getContractId());
		cl.setContractAmount(cl.getContractAmount().subtract(settleContract.getSettleAmount()));
		cl.setDebitReceivable(cl.getDebitReceivable().subtract(settleContract.getSettleAmount()));
		contractLeaseDao.save(cl);

		settleContract.setEffective(Constant.DISENABLED);
		settleContractDao.save(settleContract);
	}

	// ====================================================================================//
	public BigDecimal getRelatePaymentAmount(Long settled) {
		SettleContract settleContract = settleContractDao.get(settled);
		return settleContract.getSettleAmount();
	}

	public void saveRelateAmountPaymentStatus(AmountPayment amountPayment, Long settled, String status) {
		SettleContract b = settleContractDao.get(settled);
		b.setFinishedAmount(amountPayment.getHasPaymentAmount());
		b.setFundStatus(status);
		settleContractDao.save(b);
	}

	public BigDecimal getRelateReceiveAmount(Long settled) {
		SettleContract settleContract = settleContractDao.get(settled);
		return settleContract.getSettleAmount();
	}

	public BigDecimal calculate(SettleContract sc, BigDecimal currentReceiveAmount) {
		if(sc.getBalanceAmount().compareTo(currentReceiveAmount) == -1) {
			BigDecimal tempAmount = currentReceiveAmount.subtract(sc.getBalanceAmount());
			sc.setFinishedAmount(sc.getSettleAmount());
			sc.setBalanceAmount(BigDecimal.ZERO);
			sc.setFundStatus(Status.Fund.received);
			settleContractDao.save(sc);
			return tempAmount;
		}else {
			sc.setFinishedAmount(currentReceiveAmount);
			sc.setBalanceAmount(sc.getSettleAmount().subtract(currentReceiveAmount));
			sc.setFundStatus(Status.Fund.receiving);
			settleContractDao.save(sc);
			return BigDecimal.ZERO;
		}
		
	}
	public void saveRelateAmountReceiveStatus(AmountReceive amountReceive, Long settled, String status) {
		SettleContract b = settleContractDao.get(settled);
		if(Status.Fund.receiving.equals(status) || amountReceive.getRelateAmount().compareTo(amountReceive.getHasReceiveAmount()) == 0) {
			b.setFinishedAmount(amountReceive.getHasReceiveAmount());
			b.setBalanceAmount(amountReceive.getRelateAmount().subtract(amountReceive.getHasReceiveAmount()));
			b.setFundStatus(status);
			settleContractDao.save(b);
		}else {
			QueryFilter filter = new QueryFilter();
			filter.addConjunctFilter("Q_contractId_L_EQ", b.getContractId()+"");
			filter.addConjunctFilter("Q_delFlag_S_EQ", Constant.ENABLED);
			filter.addConjunctFilter("Q_effective_S_EQ", Constant.ENABLED);
			filter.addConjunctFilter("Q_fundStatus_S_NEQ", Status.Fund.received);
			filter.addSorted("settleId", QueryFilter.ORDER_ASC);
			List<SettleContract> list = settleContractDao.getAll(filter);
			BigDecimal currentReceiveAmount = amountReceive.getReceiveAmount();
			for(SettleContract sc : list) {
				if(currentReceiveAmount == BigDecimal.ZERO) {
					break;
				}
				currentReceiveAmount = calculate(sc, currentReceiveAmount);
			}
		}
	}

	public Set<ContractCostitem> getContractCostitems(Long contractId){
		ContractLease c = contractLeaseDao.get(contractId);
		return c.getContractCostitemSet();

	}

	@Override
	public void deleteOperatorSalary(Long statementId) {
		operatorSalaryStatementDao.remove(statementId);
	}

	@Override
	public void deleteSafetyMonitor(Long statementId) {
		safetyMonitorSettleStatementDao.remove(statementId);
	}

	@Override
	public void deleteOtherExpense(Long statementId) {
		otherExpenseStatementDao.remove(statementId);
	}

}
